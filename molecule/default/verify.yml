---

- name: Verify
  hosts: "{{ playbook_hosts | default('all') }}"
  vars:
    openwebui_virtualenv: /var/_openwebui/env-openwebui
    exec_file: "{{ openwebui_virtualenv }}/bin/open-webui"
    exec_mode: '0775'
    processes:
      - { u: _openwebui, p: python }
    ports:
      # open-webui
      - { h: 127.0.0.1, p: 8080 }
    is_container: false
  pre_tasks:
    - name: RedHat | Ensure ps and host are present
      ansible.builtin.package:
        name:
          - procps-ng
          - bind-utils
        state: present
      when: ansible_os_family == "RedHat" and ansible_distribution_major_version | int >= 8
    - name: Debian | Ensure ps and host present
      ansible.builtin.package:
        name:
          - procps
          - dnsutils
        state: present
      when: ansible_os_family == "Debian"
    - name: Debug | var ansible_virtualization_type
      ansible.builtin.debug:
        var: ansible_virtualization_type
    - name: Set fact is_container
      ansible.builtin.set_fact:
        is_container: true
      when: >
        (ansible_virtualization_type is defined and
          (ansible_virtualization_type == "docker"
           or ansible_virtualization_type == "containerd"
           or ansible_virtualization_type == "container"
          )
        )
    - name: Debian |Â Set fact
      ansible.builtin.set_fact:
        exec_mode: '0755'
      when: ansible_distribution == "Debian"
  tasks:
    - name: Check executable
      ansible.builtin.stat:
        path: "{{ exec_file }}"
      register: bin1
      become: yes
    - name: Validate executable is present
      ansible.builtin.assert:
        that:
          - bin1.stat.exists and bin1.stat.size != 0 and bin1.stat.mode == exec_mode

    - name: Ensure processes are running
      ansible.builtin.command:
        cmd: "pgrep -u {{ item.u }} {{ item.p }}"
      register: ps
      changed_when: false
      failed_when: false
      loop: "{{ processes }}"
    - name: Validate ps output
      ansible.builtin.assert:
        that:
          - item.stdout | length > 0
      loop: "{{ ps.results }}"
      when:
        - not is_container|bool

    - name: Check all processes
      ansible.builtin.command: ps aux
      changed_when: false
      register: psa
    - name: Debug | ps aux output
      ansible.builtin.debug:
        var: psa
        verbosity: 1

    - name: Ensure ports are listening
      ansible.builtin.wait_for:
        host: "{{ item.h }}"
        port: "{{ item.p }}"
        timeout: 10
      with_items: "{{ ports }}"
      when:
        - not is_container|bool

    - name: Ensure pip-audit is present
      ansible.builtin.pip:
        name: pip-audit
        state: present
        virtualenv: "{{ openwebui_virtualenv }}"
      become: yes
    - name: Pip list
      ansible.builtin.command: "{{ openwebui_virtualenv }}/bin/pip list"
      changed_when: false
      failed_when: false
    - name: Ensure pipdeptree is present
      ansible.builtin.pip:
        name: pipdeptree
        state: present
        virtualenv: "{{ openwebui_virtualenv }}"
      become: yes
    - name: Pipdeptree
      ansible.builtin.command: "{{ openwebui_virtualenv }}/bin/pipdeptree -r"
      changed_when: false
      failed_when: false
    - name: Pip-audit
      ansible.builtin.command: "{{ openwebui_virtualenv }}/bin/pip-audit"
      changed_when: false
      failed_when: false
      register: audit
    - name: Validate no known vulnerabilities from pip-audit
      ansible.builtin.assert:
        that:
          - "'No known vulnerabilities found' in audit.stderr"
      failed_when: false
